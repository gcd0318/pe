"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle   P3,n=n(n+1)/2   1, 3, 6, 10, 15, ... 
Square   P4,n=n2   1, 4, 9, 16, 25, ... 
Pentagonal   P5,n=n(3n1)/2   1, 5, 12, 22, 35, ... 
Hexagonal   P6,n=n(2n1)   1, 6, 15, 28, 45, ... 
Heptagonal   P7,n=n(5n3)/2   1, 7, 18, 34, 55, ... 
Octagonal   P8,n=n(3n2)   1, 8, 21, 40, 65, ... 

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first). 
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set. 
This is the only set of 4-digit numbers with this property. 
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""
import math
from collections import deque

def p(i,n):
    res = 0
    if(3 <= i):
        res = (((i-2)*n-i+4)*n/2)
    return int(res)

def rp(p, i):
    return int(((i-4)+math.sqrt((i-4)**2+8*p*(i-2)))/(2*(i-2)))

def nop4(i):
    lb = math.ceil((math.sqrt(i*(i+7992)-15984)+i-4)/(2*i-4))
    ub = math.floor((math.sqrt(i*(i+79992)-159984)+i-4)/(2*i-4))
    return lb, ub

def isConn(i, j):
    return (str(i)[2:] == str(j)[:2])

def multiAdd(ll, l):
    resl = []
    for i in l:
        for j in ll:
            tj = j + []
            resl.append(tj+[i])
    return resl

d = {}
l = []
for i in range(3,8+1):
    lb, ub = nop4(i)
    tl = []
    for j in range(lb, ub+1):
        t = p(i, j)
        if('0' != str(t)[2]):
            l.append([i, t])
            tl.append(t)
    d[i] = tl + []

dic = {}
for i in l:
    k = i[0]
    v = i[1]
    tl = []
    for j in l:
        if((k != j[0])and(isConn(v, j[1]))):
            tl.append(j[1])
    dic[v] = tl+[]

sod = len(dic)
nsod = 0
while(nsod != sod):
    sod = nsod
    dl = list(dic.keys())
    for i in dl:
        if(0 == len(dic[i])):
            dic.pop(i)
            for j in dic:
                tvl = []
                for x in dic[j]:
                    if(i != x):
                        tvl.append(x)
                    dic[j] = list(set(tvl))
    nsod = len(dic)

tpnl = list(dic.keys())
tpnl.sort()
pnl = deque(tpnl)

rd = {}
for i in pnl:
    tl = []
    for j in d:
        if(i in d[j]):
            tl.append(j)
    rd[i] = tl + []

N = 3
resl = []
tstack = []
sstack = []
while((N > len(resl))or(not(isConn(resl[N-1], resl[0])))):
    if(N == len(resl)):
        resl.pop()
        tstack = sstack.pop()
        if(0 < len(tstack)):
            resl.append(tstack.pop())
            sstack.append(tstack + [])
            tstack = dic[resl[-1]] + []
        else:
            resl.pop()
            tstack = sstack.pop()
#        print(1, resl, tstack, sstack)
    elif(0 == len(resl)):
        resl.append(pnl.popleft())
        sstack.append(tstack + [])
        tstack = dic[resl[-1]] + []
#    print(resl)
#    print('==========')
    if(N > len(resl)):
#        print(2, resl, tstack, sstack)
        if(0 < len(tstack)):
            resl.append(tstack.pop())
            sstack.append(tstack + [])
            tstack = dic[resl[-1]] + []
#            print(3, resl, tstack, sstack)
        else:
            resl.pop()
            tstack = sstack.pop()

    if((N == len(resl))and(isConn(resl[N-1], resl[0]))):
        il = [[]]
        for x in resl:
            il = multiAdd(il, rd[x])
        print(il)
        ind = len(il) - 1
        while(0 < ind):
            if(N == len(set(il[ind]))):
                ind = -1
            else:
                ind = ind - 1
            print(ind)
        if(0 == ind):
            print('again: ', resl[-1], " is popped")
            resl.pop()
            tstack = sstack.pop()

for i in resl:
    print(i, rp(i, rd[i][0]), rd[i])
print(sum(resl))
